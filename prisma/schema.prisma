// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model VerifyEmail {
  email      String   @id @unique
  isVerified Boolean  @default(false)
  tokenHash  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

//!add auto delete 

model User {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @default(now())
  email      String     @unique
  hash       String
  name       String
  Order      Order[]
  CartItem   CartItem[]
  role       Role       @default(USER)

  //TODO  Address    String
  //TODO  Phone    String
  @@map("users")
}

//! add more 
enum Size {
  SMALL
  MEDIUM
  LARGE
}

//! index on email
model Inventory {
  // id         Int      @id @default(autoincrement())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  size       Size
  quantity   Int
  price      Float
  discount   Float
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  CartItem   CartItem[]

  @@id([productId, size])
}

enum Category {
  MEN
  WOMEN
  KIDS
  SUMMER
  WINTER
}

model Product {
  // Rating
  id          Int        @id @default(autoincrement())
  created_at  DateTime   @default(now())
  in_stock    Boolean    @default(false)
  archived    Boolean    @default(false)
  name        String
  description String
  // !images      String[] //max 10
  color       String
  material    String
  category    Category[]
  brand       String

  inventory     Inventory[]
  baseProductId Int?
  baseProduct   Product?    @relation("ProductVariants", fields: [baseProductId], references: [id])
  students      Product[]   @relation("ProductVariants")
  OrderItem     OrderItem[]
  CartItem      CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  size      Size
  inventory Inventory @relation(fields: [productId, size], references: [productId, size], onDelete: Cascade)

  //! is this okay for performance 
  // @@unique([userId, inventoryId])
  @@unique([userId, productId, size])
  @@index([userId])
}

enum OrderStatus {
  PLACED
  DISPATCHED
  DELIVERED
  CANCELED
  //! add more? 
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  status       OrderStatus @default(PLACED)
  paymentType  String
  total_amount Float
  order_items  OrderItem[]
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
}

model OrderItem {
  // id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  price     Float
  quantity  Int
  discount  Float
  size      Size

  @@id([orderId, productId])
}
